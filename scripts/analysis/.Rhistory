df_train$yield <- 1- df_train$yield
df_train$affinity <- df_train$Vmax/df_train$KD
df_test <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_test_growth.csv")
df_test$gramstain <- as.numeric(df_test$gramstain)
df_test$yield <- 1- df_test$yield
df_test$affinity <- df_test$Vmax/df_test$KD
# log transform data
logdf_train <- (df_train) %>%
filter(!is.nan(rgrowth) & affinity > 0.0)
logdf_test <- (df_test) %>%
filter(!is.nan(rgrowth) & affinity > 0.0)
# simple tree
train = sample(1:nrow(logdf_train), nrow(logdf_train))
tree.bge = tree(rgrowth~., logdf_train, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
yhat = predict(tree.bge, newdata=logdf_test)
bge.test = logdf_test["rgrowth"]
plot(yhat,bge.test$rgrowth)
abline(0,1)
mean((yhat-bge.test$rgrowth)^2)
sqrt(mean((yhat-bge.test$rgrowth)^2))
library(randomForest)
# bagging m=p
bag.bge = randomForest(rgrowth~., data=logdf_train, subset=train, mtry=13, importance=TRUE)
yhat.bag = predict(bag.bge, newdata=logdf_test)
plot(yhat.bag, bge.test$rgrowth)
abline(0,1)
mean((yhat.bag-bge.test$rgrowth)^2)
sqrt(mean((yhat.bag-bge.test$rgrowth)^2))
# random forest m=sqrt(p)
rf.bge = randomForest(rgrowth~., data=logdf_train, subset=train, importance=TRUE)
yhat.rf = predict(rf.bge, newdata=logdf_test)
mean((yhat.rf-bge.test$rgrowth)^2)
sqrt(mean((yhat.rf-bge.test$rgrowth)^2))
# predictor importance
importance(rf.bge)
varImpPlot(rf.bge)
# boosting
library(gbm)
boost.bge = gbm(rgrowth~., data=logdf_train, distribution="gaussian", n.trees=500)
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/batch_cue_regression_tree.svg")
summary(boost.bge)
df_all <- bind_rows(logdf_train, logdf_test)
df_low <- df_all %>% filter(rgrowth < 0.017)
df_high <- df_all %>% filter(rgrowth > 0.017)
lm.low <- lm(log(rgrowth)~log(Vmax), df_low)
summary(lm.low)
plot(df_low$rgrowth, df_low$Vmax, log='xy')
plot(df_high$rgrowth, df_high$Vmax, log='xy')
View(df_all)
View(logdf_test)
df_all <- bind_rows(logdf_train, logdf_test)
df_low <- df_all %>% filter(rgrowth < 0.017)
df_high <- df_all %>% filter(rgrowth > 0.017)
plot(df_low$rgrowth, df_low$KD, log='xy')
plot(df_high$rgrowth, df_high$KD, log='xy')
plot(df_low$rgrowth, df_low$KD, log='xy')
plot(df_low$rgrowth, df_low$Vmax, log='xy')
plot(df_low$rgrowth, df_low$affinity, log='xy')
plot(df_low$rgrowth, df_low$KD, log='xy')
plot(df_low$rgrowth, df_low$rho, log='xy')
plot(df_high$rgrowth, df_high$KD, log='xy')
plot(df_high$rgrowth, df_high$Vmax, log='xy')
plot(df_high$rgrowth, df_high$affinity, log='xy')
plot(df_high$rgrowth, df_high$rho, log='xy')
lm.low <- lm(log(rho)~log(rgrowth), df_low)
summary(lm.low)
lm.high <- lm(log(rho)~log(rgrowth), df_high)
summary(lm.high)
plot(df_all$rgrowth, df_all$KD, log='xy')
plot(df_all$rgrowth, df_all$Vmax, log='xy')
plot(df_all$rgrowth, df_all$affinity, log='xy')
plot(df_all$rgrowth, df_all$rho, log='xy')
plot(df_all$rgrowth, df_all$rho, log='xy')
df_all <- bind_rows(logdf_train, logdf_test)
df_low <- df_all %>% filter(rgrowth < 0.04)
df_high <- df_all %>% filter(rgrowth > 0.04)
lm.low <- lm(log(rgrowth)~log(Vmax), df_low)
summary(lm.low)
lm.low <- lm(log(rgrowth)~log(KD), df_low)
summary(lm.low)
lm.high <- lm(log(rgrowth)~log(Vmax/KD), df_high)
summary(lm.high)
lm.high <- lm(log(KD)~log(rgrowth), df_high)
summary(lm.high)
lm.low <- lm(log(KD)~log(rgrowth), df_low)
summary(lm.low)
plot(df_low$rgrowth, df_low$KD, log='xy')
plot(df_low$rgrowth, df_low$Vmax, log='xy')
plot(df_low$rgrowth, df_low$affinity, log='xy')
plot(df_low$rgrowth, df_low$rho, log='xy')
plot(df_high$rgrowth, df_high$KD, log='xy')
plot(df_high$rgrowth, df_high$Vmax, log='xy')
plot(df_high$rgrowth, df_high$affinity, log='xy')
plot(df_high$rgrowth, df_high$rho, log='xy')
plot(df_all$rgrowth, df_all$KD, log='xy')
plot(df_all$rgrowth, df_all$Vmax, log='xy')
plot(df_all$rgrowth, df_all$affinity, log='xy')
library(tree)
library(MASS)
library(tidyverse)
library(stringr)
set.seed(1)
df_train <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_train.csv")
df_train$gramstain <- as.numeric(df_train$gramstain)
df_train$yield <- 1- df_train$yield
df_test <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_test.csv")
df_test$gramstain <- as.numeric(df_test$gramstain)
df_test$yield <- 1- df_test$yield
# log transform data
logdf_train <- log(df_train) %>%
filter(!is.nan(BGE))
logdf_test <- log(df_test) %>%
filter(!is.nan(BGE))
# simple tree
train = sample(1:nrow(logdf_train), nrow(logdf_train))
tree.bge = tree(BGE~., logdf_train, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
exp(-0.49)
exp(=1/36)
exp(-1.36)
exp(-1.95)
yhat = predict(tree.bge, newdata=logdf_test)
bge.test = logdf_test["BGE"]
plot(yhat,bge.test$BGE)
abline(0,1)
mean((yhat-bge.test$BGE)^2)
sqrt(mean((yhat-bge.test$BGE)^2))
library(randomForest)
# bagging m=p
bag.bge = randomForest(BGE~., data=logdf_train, subset=train, mtry=13, importance=TRUE)
yhat.bag = predict(bag.bge, newdata=logdf_test)
plot(yhat.bag, bge.test$BGE)
abline(0,1)
mean((yhat.bag-bge.test$BGE)^2)
sqrt(mean((yhat.bag-bge.test$BGE)^2))
# random forest m=sqrt(p)
rf.bge = randomForest(BGE~., data=logdf_train, subset=train, importance=TRUE)
yhat.rf = predict(rf.bge, newdata=logdf_test)
mean((yhat.rf-bge.test$BGE)^2)
sqrt(mean((yhat.rf-bge.test$BGE)^2))
# predictor importance
importance(rf.bge)
varImpPlot(rf.bge)
# boosting
library(gbm)
boost.bge = gbm(BGE~., data=logdf_train, distribution="gaussian", n.trees=500)
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/batch_cue_regression_tree.svg")
summary(boost.bge)
# partial dependence
par(mfrow=c(1,2))
plot(boost.bge, i="genomesize")
plot(boost.bge, i="gc")
yhat.boost = predict(boost.bge, newdata=logdf_test, n.tress=500)
svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/batch_cue_regression_error.svg")
plot(yhat.boost, bge.test$BGE)
abline(0,1)
dev.off()
mean((yhat.boost-bge.test$BGE)^2)
print(pretty.gbm.tree(boost.bge, i.tree = boost.bge$n.trees))
# shrinkage parameter
boost.boston = gbm(medv~., data=Boston[train,], distribution="gaussian", n.trees=500, interaction.depth=4, shrinkage=0.2, verbose=F)
yhat.boost = predict(boost.boston, newdata=Boston[-train,], n.tress=500)
mean((yhat.boost-boston.test)^2)
df_all <- bind_rows(df_train, df_test)
df_low <- df_all %>% filter(BGE < 0.25)
df_high <- df_all %>% filter(BGE > 0.25)
lm.low <- lm(log(rho)~log(yield), df_low)
summary(lm.low)
lm.low.poly <- lm(log(rho)~poly(log(yield),3), df_low)
summary(lm.low.poly)
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/batch_cue_regression_tree.svg")
summary(boost.bge)
# simple tree
train = sample(1:nrow(logdf_train), nrow(logdf_train))
tree.bge = tree(BGE~., logdf_train, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
exp(-0.5)
exp(-1.36)
exp(-0.57)
exp(-0.94)
exp(-6.57)
df_train <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_train_growth.csv")
df_train$gramstain <- as.numeric(df_train$gramstain)
df_train$yield <- 1- df_train$yield
df_train$affinity <- df_train$Vmax/df_train$KD
df_test <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_test_growth.csv")
df_test$gramstain <- as.numeric(df_test$gramstain)
df_test$yield <- 1- df_test$yield
df_test$affinity <- df_test$Vmax/df_test$KD
# log transform data
logdf_train <- (df_train) %>%
filter(!is.nan(rgrowth) & affinity > 0.0)
logdf_test <- (df_test) %>%
filter(!is.nan(rgrowth) & affinity > 0.0)
# simple tree
train = sample(1:nrow(logdf_train), nrow(logdf_train))
tree.bge = tree(rgrowth~., logdf_train, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
yhat = predict(tree.bge, newdata=logdf_test)
bge.test = logdf_test["rgrowth"]
plot(yhat,bge.test$rgrowth)
abline(0,1)
mean((yhat-bge.test$rgrowth)^2)
sqrt(mean((yhat-bge.test$rgrowth)^2))
library(randomForest)
# bagging m=p
bag.bge = randomForest(rgrowth~., data=logdf_train, subset=train, mtry=13, importance=TRUE)
yhat.bag = predict(bag.bge, newdata=logdf_test)
plot(yhat.bag, bge.test$rgrowth)
abline(0,1)
mean((yhat.bag-bge.test$rgrowth)^2)
sqrt(mean((yhat.bag-bge.test$rgrowth)^2))
# random forest m=sqrt(p)
rf.bge = randomForest(rgrowth~., data=logdf_train, subset=train, importance=TRUE)
yhat.rf = predict(rf.bge, newdata=logdf_test)
mean((yhat.rf-bge.test$rgrowth)^2)
sqrt(mean((yhat.rf-bge.test$rgrowth)^2))
# predictor importance
importance(rf.bge)
varImpPlot(rf.bge)
# boosting
library(gbm)
boost.bge = gbm(rgrowth~., data=logdf_train, distribution="gaussian", n.trees=500)
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/batch_cue_regression_tree.svg")
summary(boost.bge)
lm.low <- lm(log(KD)~log(rgrowth), df_low)
summary(lm.low)
df_all <- bind_rows(logdf_train, logdf_test)
df_low <- df_all %>% filter(rgrowth < 0.017)
df_high <- df_all %>% filter(rgrowth > 0.017)
lm.low <- lm(log(KD)~log(rgrowth), df_low)
summary(lm.low)
lm.high <- lm(log(KD)~log(rgrowth), df_high)
summary(lm.high)
library("tidyverse")
library("lme4")
## Batch model BGE predictions
kcat.f <- read.csv("/Users/glmarschmann/Data/Beatrice/BRENDA Cellulase EC 3.2.1.4.csv")
View(kcat.f)
kcat.f$TURNOVER.NUMBER..1.s.
sum(is.na(kcat.f$TURNOVER.NUMBER..1.s.))
sum(!is.na(kcat.f$TURNOVER.NUMBER..1.s.))
View(kcat.f)
sum(!is.na(kcat.f$kcat.KM.VALUE..1.mMs.1..))
sum(!is.na(kcat.f$SPECIFIC.ACTIVITY..µmol.min.mg.))
## Batch model BGE predictions
kcat.f <- read.csv("/Users/glmarschmann/Downloads/brenda_cellulase_ec_3.2.1.4-2.csv")
# only 2 out of 761 entries have turnover numbers (mol substrate/mol enzyme/s corresponding to Jinyun's catalytic efficiency)
sum(!is.na(kcat.f$TURNOVER.NUMBER..1.s.))
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(ggplot2)
names <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_name.csv")
names <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_name.csv")
dat <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_pca.csv")
rownames(dat) <- names[,1]
View(dat)
colnames(dat) <- c("Genome size", "Minimum generation time", "RRN", "Total transporters", "Sugars", "Auxins", "Fatty acids", "Nucleotides", "Amino acids", "Organic acids", "GHs", "SAV", "Response")
pca.res <- PCA(dat, quali.sup = c(13), scale.unit = TRUE, graph = FALSE)
p <- fviz_pca_biplot(pca.res,
geom.ind = c("text"), labelsize=3, # show points only (nbut not "text")
col.ind = dat$Response, # color by groups
palette = c("#bd5e8b", "#007100", '#525252'),
addEllipses = FALSE, # Concentration ellipses
pointshape = 15, pointsize = 3,
geom.var = c("arrow", "point", "text"), col.var="black", alpha.var=0.3, repel=TRUE,
title="", show.legend=FALSE, xlab="PC1 (31% contribution to total variance)", ylab="PC2 (17.7% contribution to total variance)")
p <- fviz_add(p, pca.res$quali.sup$coord, color = c("#bd5e8b", "#007100", '#525252'), labelsize=5, pointsize=1, repel=FALSE)
ggsave("/Users/glmarschmann/.julia/dev/DEBmicroTrait/first_manuscript/plots/IsolatesPCA.png", width=5.5, height=5.5)
ggsave("/Users/glmarschmann/.julia/dev/DEBmicroTrait/plots/IsolatesPCA.png", width=5.5, height=5.5)
View(dat)
View(pca.res)
pca.res$var
pca.res$ind$coord[, 1]
summart(pca.res)
summary(pca.res)
library("tidyverse")
library("lme4")
library("MuMIn")
library("diptest")
# FCR - cell size
FCR.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_power_yield.csv")
# FCR - cell size
FCR.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_protein_synthesis.csv.csv")
# FCR - cell size
FCR.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_protein_synthesis.csv.csv")
# FCR - cell size
FCR.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_protein_synthesis.csv")
FCR.lm <- lm(log(FCR) ~ log(Vcell), data = FCR.f)
summary(FCR.lm)
kE.lm <- lm(log(kE) ~ log(Vcell), data = FCR.f)
summary(kE.lm)
View(FCR.f)
kE.lm <- lm(log(k_E) ~ log(Vcell), data = FCR.f)
summary(kE.lm)
yEV.lm <- lm(log(y_EV) ~ log(Vcell), data = FCR.f)
summary(yEV.lm)
library("PerformanceAnalytics")
library("tidyverse")
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_assimilation.csv")
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
#affinity_log = log(affinity),
affinity_log = log(1/KD)
)
df_numeric <- df_norm[,12:16]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
#affinity_log = log(affinity),
affinity_log = log(KD/Vmax)
)
df_numeric <- df_norm[,12:16]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
## Batch model BGE predictions
BGE.f.all <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_BGE_all.csv") %>%
filter(!is.nan(BGE))
View(BGE.f.all)
BGE.f.all.high = BGE.f.all[BGE.f.all$rgrowth >= 0.055]
BGE.f.all.high = BGE.f.all[BGE.f.all$rgrowth >= 0.055]
BGE.f.all.high = BGE.f.all[BGE.f.all$rgrowth >= 0.055, ]
BGE.f.all.low = BGE.f.all[BGE.f.all$rgrowth < 0.0407, ]
kruskal.test(BGE.f.all.high$KD, BGE.f.all.low$KD)
BGE.f.all.high = BGE.f.all[BGE.f.all$rgrowth >= 0.055, 1:1334]
BGE.f.all.low = BGE.f.all[BGE.f.all$rgrowth < 0.0407, ]
kruskal.test(BGE.f.all.high$KD[1:1134], BGE.f.all.low$KD)
BGE.f.all.high$KD
BGE.f.all.high$KD[1]
BGE.f.all.high$KD[1:1136]
BGE.f.all.high$KD[1:1134]
kruskal.test(BGE.f.all.high$KD[1:1134], BGE.f.all.low$KD[1:1134])
kruskal.test(BGE.f.all.high$KD[1:1136], BGE.f.all.low$KD[1:1136])
kruskal.test(BGE.f.all.high$KD[1:1136], BGE.f.all.low$KD[1:1134])
kruskal.test(BGE.f.all.high$KD[1:1134], BGE.f.all.low$KD[1:1134])
kruskal.test(BGE.f.all.high$Vmax[1:1134], BGE.f.all.low$Vmax[1:1134])
kruskal.test(BGE.f.all.high$KD[1:1134], BGE.f.all.low$KD[1:1134])
kruskal.test(BGE.f.all.high$Vmax[1:1134], BGE.f.all.low$Vmax[1:1134])
kruskal.test(BGE.f.all.high$Vmax[1:1136], BGE.f.all.low$Vmax[1:1136])
kruskal.test(BGE.f.all.high$KD[1:1134], BGE.f.all.low$KD[1:1134])
kruskal.test(BGE.f.all.high$rdreserve[1:1134], BGE.f.all.low$rdreserve[1:1134])
kruskal.test(BGE.f.all.high$rmaint[1:1134], BGE.f.all.low$rmaint[1:1134])
library("PerformanceAnalytics")
library("tidyverse")
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_assimilation.csv")
View(df)
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
#affinity_log = log(affinity),
#affinity_log = log(KD/Vmax)
)
View(df_norm)
df_numeric <- df_norm[,12:15]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
library("PerformanceAnalytics")
library("tidyverse")
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_assimilation_sav.csv")
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
affinity_log = log(affinity),
affinity_log = log(KD/Vmax)
)
df_numeric <- df_norm[,12:15]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
View(df_norm)
df_numeric <- df_norm[,11:15]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_assimilation_sav.csv")
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
affinity_log = log(affinity),
affinity_log = log(KD/Vmax)
)
df_numeric <- df_norm[,11:15]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_assimilation.csv")
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
affinity_log = log(affinity),
affinity_log = log(KD/Vmax)
)
df_numeric <- df_norm[,11:15]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
df_numeric <- df_norm[,12:15]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
df_numeric <- df_norm[,12:16]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
exp(-8)
exp(-4)
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
affinity_log = log(affinity),
#affinity_log = log(KD/Vmax)
)
df_numeric <- df_norm[,12:16]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_assimilation_sav1.csv")
df_norm <- df %>%
filter(transporter_density >1e-8) %>%
mutate(transporter_density_log = log(transporter_density),
sav_size_log = log(sav),
Vmax_log = log(Vmax),
KD_log = log(KD),
affinity_log = log(affinity),
#affinity_log = log(KD/Vmax)
)
df_numeric <- df_norm[,12:16]
#svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/test.svg")
chart.Correlation(df_numeric, histogram=TRUE, label="", method="spearman")
library("tidyverse")
library("lme4")
library("MuMIn")
library("diptest")
rm(list=ls())
setwd("/Users/glmarschmann/.julia/dev/DEBmicroTrait/scripts/analysis")
# thermodynamic efficiency
eta.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/exudates_eta.csv")
View(eta.f)
uptake.f.grouped <- BGE.f.all %>% group_by(monomer) %>% summarise(up_med = median(ruptake), growth_med = median(rgrowth), BGE_med = median(BGE), yield_med = median(yield))
## Batch model BGE predictions
BGE.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_BGE_new.csv") %>%
filter(!is.nan(BGE))
## Batch model BGE predictions
BGE.f.all <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/files/isolates_batch_model_BGE_all.csv") %>%
filter(!is.nan(BGE))
uptake.f.grouped <- BGE.f.all %>% group_by(monomer) %>% summarise(up_med = median(ruptake), growth_med = median(rgrowth), BGE_med = median(BGE), yield_med = median(yield))
uptake.f.grouped$muED <- uptake.f.grouped$growth_med/uptake.f.grouped$yield_med
df_combined <- merge(eta.f, uptake.f.grouped, by="monomer")
plot(df_combined$muED, df_combined$eta, log='xy')
View(df_combined)
plot(df_combined$muED, df_combined$lambda, log='xy')
etareg <- lm(log(lambda) ~ log(muED), data = df_combined)
summary(etareg)
plot(df_combined$BGE_med, df_combined$lambda, log='xy')
plot(df_combined$yield_med, df_combined$lambda, log='xy')
View(BGE.f)
View(eta.f)
View(BGE.f.all)
View(BGE.f.all)
View(BGE.f)
plot(1/df_combined$yield_med, df_combined$lambda, log='xy')
