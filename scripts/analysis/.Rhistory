install.packages("tree")
library(tree)
tree.boston = tree(medv~., Boston.subset=train)
tree.boston = tree(medv~., Boston, subset=train)
?tree
summary(tree.boston)
plot(tree.boston)
plot(tree.boston)
text(tree.boston)
?text
text(tree.boston)
text(tree.boston, pretty=0)
cv.boston = cv.tree(tree.boston)
plot(tree.boston)
plot(cv.boston$size, cv.boston$dev, type='b')
library(tree)
library(MASS)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston = tree(medv~., Boston, subset=train)
summary(tree.boston)
cv.boston = cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type='b')
plot(tree.boston)
text(tree.boston)
cv.boston = cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type='b')
?prune.tree
prune.boston = prune.tree(tree.boston, best=5)
plot(prune.boston)
text(prune.boston, pretty=0)
yhat = predict(tree.boston, newdata=Boston[-train],)
yhat = predict(tree.boston, newdata=Boston[-train,])
boston.test = Boston[-train, "medv"]
plot(yhat,boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
sqrt(mean((yhat-boston.test)^2))
library(randomForest)
install.packages("randomForest")
library(randomForest)
# bagging
bag.boston = randomForest(medv~., data=Boston, subset=train, mtry=13, importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston, newdata=Boston[-train,])
plot(yhat.bag, boston,test)
plot(yhat.bag, boston.test)
abline(0,1)
sqrt(mean((yhat-boston.test)^2))
sqrt(mean((yhat.bag-boston.test)^2))
bag.boston = randomForest(medv~., data=Boston, subset=train, mtry=13, ntree=25, importance=TRUE)
yhat.bag = predict(bag.boston, newdata=Boston[-train,])
sqrt(mean((yhat.bag-boston.test)^2))
?randomForest
# random forest
rf.boston = randomForest(medv~., data=Boston, subset=train, mtry=6, importance=TRUE)
yhat.rf = predict(rf.boston, newdata=Boston[-train,])
sqrt(mean((yhat.rf-boston.test)^2))
(mean((yhat.rf-boston.test)^2))
sqrt(mean((yhat.rf-boston.test)^2))
# predictor importance
importance(rf.boston)
varImpPlot(rf.boston)
install.packages("gbm")
# boosting
library(gbm)
boost.boston = gbm(medv~., data=Boston[train,], distribution="gaussian", n.trees=500, interaction.depth=4)
summary(boost.boston)
# partial dependence
par(mfrow=c(1,2))
plot(boost.boston, i="rm")
plot(boost.boston, i="lstat")
yhat.boost = predict(boost.boston, newdata=Boston[-train,], n.tress=500)
mean((yhat.boost-boston.test)^2)
# shrinkage parameter
boost.boston = gbm(medv~., data=Boston[train,], distribution="gaussian", n.trees=500, interaction.depth=4, shrinkage=0.2, verbose=F)
yhat.boost = predict(boost.boston, newdata=Boston[-train,], n.tress=500)
mean((yhat.boost-boston.test)^2)
df <- Boston
View(df)
1:nrow(Boston)
library(tidyverse)
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
View(df)
log(1e-3)
log(6679185)
library(stringr)
df$gramstain <- str_replace(df$gramstain, "(+)", 1)
df$gramstain <- str_replace(df$gramstain, "(+)", "1")
df$gramstain <- str_replace(df$gramstain, "+", "1")
df$gramstain <- str_replace(df$gramstain, "\\(+\\)", "1")
df$gramstain
df$gramstain <- str_replace(df$gramstain, "\\(+\\)", "1")
df$gramstain
df$gramstain1 <- str_replace(df$gramstain, "\\(+\\)", "1")
df$gramstain1 <- str_replace(df$gramstain, "\\(\\)", "1")
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
View(df)
# simple tree
train = sample(1:nrow(df), nrow(df))
tree.bge = tree(BGE~., df, subset=train)
summary(tree.bge)
df_norm <- df %>%
mutate(rho_log = log(rho)
)
View(df_norm)
log(1)
log(2)
log(df)
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
# simple tree
train = sample(1:nrow(df), nrow(df))
tree.bge = tree(BGE~., df, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
logdf <- log(df)
# simple tree
train = sample(1:nrow(logdf), nrow(logdf))
View(logdf)
# simple tree
train = sample(1:nrow(logdf), nrow(logdf))
tree.bge = tree(BGE~., logdf, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
plot(tree.bge)
text(tree.bge)
exp(-0.9)
exp(KD)
exp(-6.572)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.boston)
plot(prune.bge)
text(prune.bge, pretty=0)
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
logdf <- log(df)
# simple tree
train = sample(1:nrow(logdf), nrow(logdf))
tree.bge = tree(BGE~., logdf, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
View(df)
View(logdf)
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
logdf <- log(df)
# simple tree
train = sample(1:nrow(logdf), nrow(logdf))
tree.bge = tree(BGE~., logdf, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
# boosting
library(gbm)
boost.bge = gbm(BGE~., data=logdf, distribution="gaussian", n.trees=500, interaction.depth=4)
logdf
boost.bge = gbm(BGE~., data=logdf[train,], distribution="gaussian", n.trees=500, interaction.depth=4)
boost.bge = gbm(BGE~., data=df[train,], distribution="gaussian", n.trees=500, interaction.depth=4)
missing(logdf)
boost.bge = gbm(BGE~., data=logdf[train,], distribution="gaussian", n.trees=500)
library(randomForest)
# bagging m=p
bag.bge = randomForest(BGE~., data=logdf, subset=train, mtry=14, importance=TRUE)
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
logdf <- log(df)
View(logdf)
df <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
logdf <- log(df)
View(logdf)
library(randomForest)
# bagging m=p
bag.bge = randomForest(BGE~., data=logdf, subset=train, mtry=14, importance=TRUE)
# simple tree
train = sample(1:nrow(logdf), nrow(logdf))
# bagging m=p
bag.bge = randomForest(BGE~., data=logdf, subset=train, mtry=14, importance=TRUE)
logdf$BGE
df$BGE
logdf <- log(df) %>%
filter(is.nan(BGE))
View(logdf)
logdf <- log(df) %>%
filter(!is.nan(BGE))
# simple tree
train = sample(1:nrow(logdf), nrow(logdf))
# bagging m=p
bag.bge = randomForest(BGE~., data=logdf, subset=train, mtry=14, importance=TRUE)
# random forest m=sqrt(p)
rf.bge = randomForest(BGE~., data=logdf, subset=train, importance=TRUE)
# predictor importance
importance(rf.bge)
varImpPlot(rf.bge)
# boosting
library(gbm)
boost.bge = gbm(BGE~., data=logdf[train,], distribution="gaussian", n.trees=500)
summary(boost.boston)
summary(boost.bge)
# partial dependence
par(mfrow=c(1,2))
plot(boost.bge, i="yield")
exp(-0.5)
exp(-1.5)
exp(0.5)
exp(-0.5)
exp(-3)
plot(boost.bge, i="rrn")
plot(boost.bge, i="KD")
plot(boost.bge, i="Vmax")
plot(boost.bge, i="rho")
plot(boost.bge, i="genomesize")
plot(boost.bge, i="gc")
df_train <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
View(df_train)
logdf_train <- log(df_train) %>%
filter(!is.nan(BGE))
df_train$gramstain
df_train$gramstain <- as.numeric(df_train$gramstain)
logdf_train <- log(df_train) %>%
filter(!is.nan(BGE))
View(logdf_train)
df_test <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_test.csv")
df_test$gramstain <- as.numeric(df_test$gramstain)
logdf_test <- log(df_test) %>%
filter(!is.nan(BGE))
# simple tree
train = sample(1:nrow(logdf_train), nrow(logdf_train))
tree.bge = tree(BGE~., logdf_train, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
yhat = predict(tree.bge, newdata=df_test)
bge.test = logdf_test["BGE"]
plot(yhat,bge.test)
yhat = predict(tree.bge, newdata=logdf_test)
bge.test = logdf_test["BGE"]
plot(yhat,bge.test)
bge.test
yhat
plot(yhat,bge.test)
View(bge.test)
plot(yhat,bge.test["BGE"])
size(yhat)
shape(yhat)
length(yhat)
length(bge.test)
length(bge.test["BGE"])
bge.test$BGE
plot(yhat,bge.test.BGE)
plot(yhat,bge.test$BGE)
abline(0,1)
sqrt(mean((yhat-bge.test)^2))
sqrt(mean((yhat-bge.test$BGE)^2))
# pruning
prune.bge = prune.tree(tree.bge, best=6)
plot(prune.bge)
text(prune.bge, pretty=0)
# bagging m=p
bag.bge = randomForest(BGE~., data=logdf_train, subset=train, mtry=13, importance=TRUE)
mean((yhat-bge.test$BGE)^2)
sqrt(mean((yhat-bge.test$BGE)^2))
sqrt(0.04)
yhat.bag = predict(bag.bge, newdata=logdf_test)
plot(yhat.bag, bge.test)
plot(yhat.bag, bge.test$BGE)
abline(0,1)
sqrt(mean((yhat.bag-bge.test$BGE)^2))
mean((yhat.bag-bge.test$BGE)^2)
# random forest m=sqrt(p)
rf.bge = randomForest(BGE~., data=logdf_test, subset=train, importance=TRUE)
# random forest m=sqrt(p)
rf.bge = randomForest(BGE~., data=logdf_train, subset=train, importance=TRUE)
yhat.rf = predict(rf.bge, newdata=logdf_test)
sqrt(mean((yhat.rf-bge.test$BGE)^2))
mean((yhat.rf-bge.test$BGE)^2)
# predictor importance
importance(rf.bge)
varImpPlot(rf.bge)
# boosting
library(gbm)
boost.bge = gbm(BGE~., data=logdf_train, distribution="gaussian", n.trees=500)
summary(boost.bge)
yhat.boost = predict(boost.bge, newdata=logdf_test, n.tress=500)
mean((yhat.boost-bge.test$BGE)^2)
plot(boost.bge)
plot(boost.bge$trees)
boost.bge = gbm(BGE~., data=logdf_train, distribution="gaussian", n.trees=500)
svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/batch_cue_regression_tree.svg")
summary(boost.bge)
dev.off()
plot(boost.bge, i="genomesize")
exp(-0.75)
exp(-0.77)
View(df_test)
plot(yhat.boost, bge.test$BGE)
abline(0,1)
svg("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/plots/batch_cue_regression_error.svg")
plot(yhat.boost, bge.test$BGE)
abline(0,1)
dev.off()
mean((yhat.boost-bge.test$BGE)^2)
exp(-0.94)
exp(-1.37)
exp(-0.94)
1-0.39
1-0.2
library(tree)
library(MASS)
library(tidyverse)
library(stringr)
set.seed(1)
df_train <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_train.csv")
df_train$gramstain <- as.numeric(df_train$gramstain)
df_test <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/final_manuscript/files/isolates_batch_model_test.csv")
df_test$gramstain <- as.numeric(df_test$gramstain)
# log transform data
logdf_train <- log(df_train) %>%
filter(!is.nan(BGE))
logdf_test <- log(df_test) %>%
filter(!is.nan(BGE))
# simple tree
train = sample(1:nrow(logdf_train), nrow(logdf_train))
tree.bge = tree(BGE~., logdf_train, subset=train)
summary(tree.bge)
plot(tree.bge)
text(tree.bge)
cv.bge = cv.tree(tree.bge)
plot(cv.bge$size, cv.bge$dev, type='b')
# pruning
prune.bge = prune.tree(tree.bge, best=5)
plot(prune.bge)
text(prune.bge, pretty=0)
View(df_test)
library("tidyverse")
library("lme4")
library("MuMIn")
library("diptest")
rm(list=ls())
setwd("/Users/glmarschmann/.julia/dev/DEBmicroTrait/first_manuscript/scripts/analysis")
opar <- par(no.readonly = TRUE)  # Saves plot defaults
## Auxiliary functions
# Confidence Hulls
add.hull <- function(model = "", pred.frame = ""){
CI.U <- predict(model, interval = "c", newdata=pred.frame)[, "upr"]
CI.L <- predict(model, interval = "c", newdata=pred.frame)[, "lwr"]
pred.frame2 <- unlist(pred.frame)
X.Vec <- c(pred.frame2, tail(pred.frame2, 1), rev(pred.frame2),
head(pred.frame2, 1))
Y.Vec <- c(CI.U, tail(CI.L, 1), rev(CI.L), head(CI.U,1))
polygon(X.Vec, Y.Vec, col = "gray90", border = NA)
}
# Levin's index
levins <- function(p_xi = ""){
p = 0
for (i in p_xi){
p = p + i^2
}
nb = 1 / (length(p_xi) * p)
return(nb)
}
## Levin's index
porters.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/first_manuscript/files/isolates2traits.csv")
View(porters.f)
Levin.f.std <- porters.f[,18:23]/(apply(Levin.f[,18:23], 1, sum))
Levin.f.std <- porters.f[,18:23]/(apply(porters.f[,18:23], 1, sum))
View(Levin.f.std)
levins(Levin.f.std)
porters.f.levins <- levins(Levin.f.std)
View(porters.f)
porters.f$levins <- levins(Levin.f.std)
## Batch model BGE predictions
BGE.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/first_manuscript/files_pub/isolates_batch_model_BGE.csv") %>%
filter(!is.nan(BGE))
## Taxonomic and Resource Variance Partitioning
# Model 1: Isolate Identity
fm1 <- lmer(BGE ~ as.factor(isolate) + (1|monomer/ontology), data = BGE.f)
summary(fm1)$AIC
r.squaredGLMM(fm1)
qqnorm(resid(fm1))
# Model 2: Class Order
fm2 <- lmer(BGE ~ as.factor(class) + (1|monomer/ontology), data = BGE.f)
summary(fm2)$AIC
r.squaredGLMM(fm2)
qqnorm(resid(fm2))
# Model 3: Phylum Order
fm3 <- lmer(BGE ~ as.factor(phylum) + (1|monomer), data = BGE.f)
summary(fm3)$AIC
r.squaredGLMM(fm3)
qqnorm(resid(fm3))
# Model 4: Monomer Identity
fm4 <- lmer(BGE ~ as.factor(monomer) + (1|isolate/class/phylum), data = BGE.f)
summary(fm4)$AIC
r.squaredGLMM(fm4)
plot(predict(fm4), resid(fm4))
qqnorm(resid(fm4))
# Model 5: Monomer Class
fm5 <- lmer(BGE ~ as.factor(ontology) + (1|isolate/class/phylum), data = BGE.f)
summary(fm5)$AIC
r.squaredGLMM(fm5)
plot(predict(fm5), resid(fm5))
qqnorm(resid(fm5))
## Growth rate - CUE phase space
BGE.f.grouped <- BGE.f %>% group_by(response, ontology) %>% summarise(BGE_med = median(BGE), rgrowth_med = median(rgrowth))
plot(BGE.f.grouped$BGE_med, BGE.f.grouped$rgrowth_med)
# Maximum Growth Rate
growthLOW <- lm(rgrowth_med ~ BGE_med, data = BGE.f.grouped[BGE.f.grouped$rgrowth_med < 0.0407, ])
summary(growthLOW)
growthHIGH <- lm(rgrowth_med ~ BGE_med, data = BGE.f.grouped[BGE.f.grouped$rgrowth_med > 0.041, ])
summary(growthHIGH)
pred.frameLOW <- data.frame(BGE_med = seq(0.15, 0.6, by = 0.01))
pred.frameHIGH <- data.frame(BGE_med = seq(0.15, 0.6, by = 0.01))
## Enzymes
## Growth rate - enzyme rate phase space
BGE.f.grouped <- BGE.f %>% group_by(response, ontology) %>% summarise(BGE_med = median(BGE), rgrowth_med = median(rgrowth), renzyme_med = median(renzyme))
plot(BGE.f.grouped$rgrowth_med, BGE.f.grouped$renzyme_med)
## Reserve density
BGE.f.grouped <- BGE.f %>% group_by(response, ontology) %>% summarise(BGE_med = median(BGE), rgrowth_med = median(rgrowth), dreserve_med = median(rdreserve))
plot(BGE.f.grouped$BGE_med, BGE.f.grouped$dreserve_med)
# Niche breadth
Levin.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/first_manuscript/files_pub/isolates_batch_model_levin.csv") %>%
replace(is.na(.), 0.0)
Levin.f.std <- Levin.f[,1:83]/(apply(Levin.f[,1:83], 1, sum))
Levin.f.grouped <- BGE.f %>% group_by(isolate) %>% summarise(BGE_med = median(BGE))
Levin.f.grouped$levins <- levins(Levin.f.std)
Levin.f.grouped$response <- Levin.f$response
plot(Levin.f.grouped$levins, Levin.f.grouped$BGE_med)
BGELevin <- lm(BGE_med ~ levins, data = Levin.f.grouped)
summary(BGELevin)
pred.BGELevin <- data.frame(levins = seq(0.4, 1.0, by = 0.01))
dip.test(Levin.f.grouped$levins)
plot(density(Levin.f.grouped$levins))
kruskal.test(levins ~ response, Levin.f.grouped[Levin.f.grouped$response == "positive" | Levin.f.grouped$response == "undefined",])
porters.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/first_manuscript/files/isolates2traits.csv")
porters.f.std <- porters.f[,18:23]/(apply(porters.f[,18:23], 1, sum))
porters.f <- read.csv("/Users/glmarschmann/.julia/dev/DEBmicroTrait/first_manuscript/files/isolates2traits.csv")
porters.f.std <- porters.f[,18:23]/(apply(porters.f[,18:23], 1, sum))
Levin.f.grouped$levins <- levins(porters.f.std)
BGELevin <- lm(BGE_med ~ levins, data = Levin.f.grouped)
summary(BGELevin)
plot(Levin.f.grouped$levins, Levin.f.grouped$BGE_med)
porters.f.std <- porters.f[,18:24]/(apply(porters.f[,18:24], 1, sum))
Levin.f.grouped$levins <- levins(porters.f.std)
BGELevin <- lm(BGE_med ~ levins, data = Levin.f.grouped)
summary(BGELevin)
plot(Levin.f.grouped$levins, Levin.f.grouped$BGE_med)
# BGE-Levin
plot(levins ~ BGE_med, Levin.f.grouped, axes = F, type = "n",
xlab = "", ylab = "",
xlim = c(0.4, 1.0), ylim = c(0.2, 0.8), las = 1,
pch = 22, bg = "gray", lwd = 2, cex = 1.5)
add.hull(BGELevin, pred.BGELevin)
matlines(pred.BGELevin, predict(BGELevin, interval = "c", newdata=pred.BGELevin),
lty=c(2,3,3), lwd=c(4,2,2), col="black")
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "positive",],
pch = 24, bg = "white", lwd = 2, cex = 1.5)
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "negative",],
pch = 25, bg = "white", lwd = 2, cex = 1.5)
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "undefined",],
pch = 22, bg = "white", lwd = 2, cex = 1.5)
axis(1, lwd = 2, labels = T, at = c(0.4, 0.6, 0.8, 1.0), las = 1)
# BGE-Levin
plot(levins ~ BGE_med, Levin.f.grouped, axes = F, type = "n",
xlab = "", ylab = "",
xlim = c(0.0, 1.0), ylim = c(0.2, 0.8), las = 1,
pch = 22, bg = "gray", lwd = 2, cex = 1.5)
add.hull(BGELevin, pred.BGELevin)
matlines(pred.BGELevin, predict(BGELevin, interval = "c", newdata=pred.BGELevin),
lty=c(2,3,3), lwd=c(4,2,2), col="black")
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "positive",],
pch = 24, bg = "white", lwd = 2, cex = 1.5)
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "negative",],
pch = 25, bg = "white", lwd = 2, cex = 1.5)
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "undefined",],
pch = 22, bg = "white", lwd = 2, cex = 1.5)
axis(1, lwd = 2, labels = T, at = c(0.4, 0.6, 0.8, 1.0), las = 1)
pred.BGELevin <- data.frame(levins = seq(0.1, 1.0, by = 0.01))
# BGE-Levin
plot(levins ~ BGE_med, Levin.f.grouped, axes = F, type = "n",
xlab = "", ylab = "",
xlim = c(0.0, 1.0), ylim = c(0.2, 0.8), las = 1,
pch = 22, bg = "gray", lwd = 2, cex = 1.5)
add.hull(BGELevin, pred.BGELevin)
matlines(pred.BGELevin, predict(BGELevin, interval = "c", newdata=pred.BGELevin),
lty=c(2,3,3), lwd=c(4,2,2), col="black")
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "positive",],
pch = 24, bg = "white", lwd = 2, cex = 1.5)
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "negative",],
pch = 25, bg = "white", lwd = 2, cex = 1.5)
points(BGE_med ~ levins, Levin.f.grouped[Levin.f.grouped$response == "undefined",],
pch = 22, bg = "white", lwd = 2, cex = 1.5)
axis(1, lwd = 2, labels = T, at = c(0.4, 0.6, 0.8, 1.0), las = 1)
